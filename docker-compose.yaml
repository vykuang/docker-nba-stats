version: "3.7"
# ====================================== AIRFLOW ENVIRONMENT VARIABLES =======================================
x-environment: &airflow_environment
  # Airflow settings.
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  # this configures the metadata database backend that airflow depends on
  # follows this format: postgresql+psycopg2://<user>:<password>@<host>/<db>
  # which means that user/pw have been set to 'airflow', and the database to be initalized
  # is also 'airflow', via the 'environment' section under the postgres service below
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
  - AIRFLOW__WEBSERVER__RBAC=False
  # Movielens settings.
  # - AIRFLOW_CONN_MOVIELENS=http://airflow:airflow@movielens
  # - MOVIELENS_USER=airflow
  # - MOVIELENS_PASSWORD=airflow
  # - MOVIELENS_HOST=http://movielens:5000
x-airflow-image: &airflow_image apache/airflow:2.2.4-python3.8
# ====================================== /AIRFLOW ENVIRONMENT VARIABLES ======================================
services:
  postgres:
    image: postgres:12-alpine
    container_name: nba_stats-airflow-metadb
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    networks:
      - airflow

  # this is the host name to connect to in the connection URL
  nba-stats-postgres:
    image: postgres:12-alpine    
    # container_name: nba_stats-datawarehouse
    environment:
      - POSTGRES_USER=nba_stats
      - POSTGRES_PASSWORD=nba_stats
      - POSTGRES_DB=nba_stats
    ports:
      - "8081:5432"
    networks:
    # see https://docs.docker.com/compose/networking/
      - airflow
      - nba_stats
    volumes:
      - nba_stats_db:/var/lib/postgresql/data
  
  init:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: nba-stats/airflow-docker
    # container_name: chapter10_docker_init_1
    depends_on:
      - postgres
    networks:
      - airflow
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db upgrade && sleep 5 && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org'
  webserver:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: nba-stats/airflow-docker
    # container_name: chapter10_docker_webserver_1
    restart: always
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    networks:
      - airflow
    environment: *airflow_environment
    command: webserver
  scheduler:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: nba-stats/airflow-docker
    # container_name: chapter10_docker_scheduler_1
    restart: always
    depends_on:
      - postgres
    volumes:
      - ./dags:/opt/airflow/dags
      - logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - airflow
    environment: *airflow_environment
    command: scheduler

  # These aren't actual services, but we include them to make sure that the
  # corresponding images are built by when pulling up docker-compose.
  nba-api-fetch:
    build: images/nba_api
    image: nba-stats/nba-api-fetch
    # container_name: chapter10_docker_movielens-fetch_1
    restart: "no"
  transform:
    build: images/transform
    image: nba-stats/transform
    # container_name: chapter10_docker_movielens-rank_1
    restart: "no"

networks:
  airflow:
    name: airflow
  nba_stats:
    name: nba_stats


volumes:
  logs:
    name: nba_stats
  nba_stats_db:
    name: nba_stats_db