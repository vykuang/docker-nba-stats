version: "3.7"
# =========================/AIRFLOW ENVIRONMENT VARIABLES =====================
x-environment: &airflow_environment
  # Airflow settings.
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  # this configures the metadata database backend that airflow depends on
  # follows this format: postgresql+psycopg2://<user>:<password>@<host>/<db>
  # which means that user/pw have been set to 'airflow', and the database to be initalized
  # is also 'airflow', via the 'environment' section under the postgres service below
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
  - AIRFLOW__WEBSERVER__RBAC=False
x-airflow-image: &airflow_image apache/airflow:2.2.4-python3.8
# =========================/AIRFLOW ENVIRONMENT VARIABLES =====================
services:
  postgres:
    image: postgres:12-alpine
    container_name: airflow-metadb
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    networks:
      - airflow
  
  init:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: nba-stats/airflow-docker
    depends_on:
      - postgres
    networks:
      - airflow
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db upgrade && sleep 5 && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org'
  
  webserver:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: nba-stats/airflow-docker
    restart: always
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    networks:
      - airflow
    environment: *airflow_environment
    command: webserver

  scheduler:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: nba-stats/airflow-docker
    restart: always
    depends_on:
      - postgres
    volumes:
      - ./dags:/opt/airflow/dags
      - logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - airflow
    environment: *airflow_environment
    command: scheduler

  #======================== application services ========================

  # this is the host name to connect to in the connection URL
  nba-stats-db:
    # -alpine for a more lightweight db
    image: postgres:12-alpine    
    environment:
      - POSTGRES_USER=nba_stats
      - POSTGRES_PASSWORD=nba_stats
      - POSTGRES_DB=nba_stats # the default database
      - POSTGRES_PORT=5433 # 
      # defining a subdir for our db persistence
      - PGDATA=/var/lib/postgresql/data/nba_stats 
    # ports:
    #   - "8081:5432" # host port: container port
    networks:
    # see https://docs.docker.com/compose/networking/
      - nba-stats
    volumes:
      - nba-stats-db:/var/lib/postgresql/data/nba_stats

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=vykuang92@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=secret
      - PGADMIN_LISTEN_PORT=80
    ports: # expose to localhost:80 for user inspection
      - "80:80"
    networks:
      - nba-stats
    volumes:
      - pgadmin:/var/lib/pgadmin
  # These aren't actual services, but we include them to make sure that the
  # corresponding images are built by when pulling up docker-compose.
  # network and volumes are attached at run-time by airflow DAG
  nba-api-fetch:
    build: images/nba_api
    image: nba-stats/extract-nba-api
    restart: "no"
  transform:
    build: images/transform
    image: nba-stats/transform
    restart: "no"

  #======================== application services ========================

networks:
  airflow:
    name: airflow
  nba-stats:
    name: nba-stats

volumes:
  logs:
  nba-stats-db:
  data:
  pgadmin:
